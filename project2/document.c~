#include <stdio.h>
#include <string.h>
#include "document.h"

/*
Initializes *doc to have 0 paragraphs and sets the document’s name based on the provided parameter
value. The function returns FAILURE if doc is NULL, name is NULL, or if the length of the name is not
between 1 and MAX_STR_SIZE; otherwise the function returns SUCCESS.
*/
int init_document(Document *doc, const char *name){
  /*Checks if the strings are null*/
  if(doc == NULL || name == NULL){
    return FAILURE;
  }

  /*Checks if the string is within the valid parameters*/
  if(1 > strlen(name) || strlen(name) > MAX_STR_SIZE){
      return FAILURE;
  }
   
  /*Initialize the document*/
  doc->number_of_paragraphs = 0;
  strcpy(doc->name, name);

  return SUCCESS;
}

/*
Sets the number of paragraphs to 0. The function returns FAILURE if doc is NULL; otherwise the func-
tion returns SUCCESS.
*/
int reset_document(Document *doc){
  /*Checks if the strings are null*/
  if(doc == NULL){
    return FAILURE;
  }
  
  /*Reset document*/
  doc->number_of_paragraphs = 0;
  return SUCCESS;
}

/*
Prints the document’s name, number of paragraphs, followed by the paragraphs. Exactly one empty
line (with zero characters before the newline) is inserted between every two successive paragraphs. The
function returns FAILURE if doc is NULL; otherwise the function returns SUCCESS.
*/
int print_document(Document *doc){
  int i, j;
  /*Checks if the strings are null*/
  if(doc == NULL){
    return FAILURE;
  }

  /*Print name and number of paragraphs*/
  printf("Document name: \"%s\"\n", doc->name);
  printf("Number of Paragraphs: %d\n", doc->number_of_paragraphs);
  
  /*Print content of the paragraphs*/
  for(i = 0; i < doc->number_of_paragraphs; i++){
      for(j = 0; j < doc->paragraphs[i].number_of_lines; j++){
      printf("%s\n", doc->paragraphs[i].lines[j]);
    } 

    if(doc->number_of_paragraphs > 1 && (i != doc->number_of_paragraphs - 1)){
      printf("\n");
    }
  }
  return SUCCESS;
}

/*
Adds a paragraph after the specified paragraph number. Paragraph numbers in the document start
at 1. If paragraph number is 0 the paragraph is added at the beginning of the document. The func-
tion returns FAILURE if doc is NULL, the document already has the maximum number of paragraphs
(MAX PARAGRAPHS), or if paragraph number is negative or higher than the number of paragraphs in
the document; otherwise, the function returns SUCCESS.
*/
int add_paragraph_after(Document *doc, int paragraph_number){
  int i;

  /*Check if the doc is null or negative paragraph number*/
  if(doc == NULL || paragraph_number < 0){
    return FAILURE;
  }

  /*Check if the the paragraph number is greater than pargraphs*/
  if(paragraph_number > doc->number_of_paragraphs || doc->number_of_paragraphs == MAX_PARAGRAPHS){
    return FAILURE;
  }
  
  /*
  if(paragraph_number == 0){
    doc->paragraphs[0].number_of_lines = 0;
    doc->number_of_paragraphs++;
    return SUCCESS;
  }

  if(paragraph_number == doc->number_of_paragraphs){
    doc->paragraphs[doc->number_of_paragraphs].number_of_lines = 0;
    doc->number_of_paragraphs++;
    return SUCCESS;
  }
  */

  /*Adds the paragraph*/
  for(i = doc->number_of_paragraphs; i > paragraph_number; i--){
    doc->paragraphs[i] = doc->paragraphs[i-1];
  }

  doc->paragraphs[paragraph_number].number_of_lines = 0;
  doc->number_of_paragraphs++;
  
  return SUCCESS;
}

/*
Adds a new line after the line with the specified line number. Line numbers start at 1. If line number
is 0, the new line is added at the beginning of the paragraph. The function returns FAILURE if doc
is NULL, paragraph number does not refer to an existing paragraph, the paragraph already has the
maximum number of lines allowed, line number is negative or higher than the available number of lines,
or new line is NULL; otherwise, the function returns SUCCESS. Assume that a non-NULL new line is a
nul-terminated string of length between 1 and MAX_STR_SIZE.
*/
int add_line_after(Document *doc, int paragraph_number, int line_number, const char *new_line){
  int i;

/*Check if document is null or string is null*/
  if(doc == NULL || new_line == NULL){
    return FAILURE;
  }

/*Checks if paragraph exists*/
  if(doc->number_of_paragraphs < paragraph_number || paragraph_number < 0){
    return FAILURE;
  }

  /*If paragraph is a maximum capacity*/
  if(doc->paragraphs[paragraph_number - 1].number_of_lines == MAX_PARAGRAPH_LINES){
    return FAILURE;
  }
    
  /*Check if line number is valid*/
  if(line_number < 0 || line_number > doc->paragraphs[paragraph_number - 1].number_of_lines){
    return FAILURE;
  }

/*
  if(line_number == 0 && !doc->paragraphs[paragraph_number - 1].number_of_lines){
    strcpy(doc->paragraphs[paragraph_number-1].lines[0], new_line);
    doc->paragraphs[paragraph_number-1].number_of_lines++;
    return SUCCESS;
  }

  if(line_number == doc->paragraphs[paragraph_number - 1].number_of_lines){
    strcpy(doc->paragraphs[paragraph_number -1].lines[line_number], new_line);
    doc->paragraphs[paragraph_number-1].number_of_lines++;
    return SUCCESS;
  }
*/

  for(i = doc->paragraphs[paragraph_number - 1].number_of_lines; i > line_number; i--){
    strcpy(doc->paragraphs[paragraph_number - 1].lines[i-1], doc->paragraphs[paragraph_number - 1].lines[i]);
  }

  strcpy(doc->paragraphs[paragraph_number - 1].lines[line_number], new_line);
  doc->paragraphs[paragraph_number - 1].number_of_lines++;
  return SUCCESS;
}

/*
Returns the number of lines in a paragraph using the number of lines out parameter. The function
returns FAILURE if doc or number of lines is NULL or if paragraph number does not refer to an existing
paragraph; otherwise, the function returns SUCCESS.
*/
int get_number_lines_paragraph(Document *doc, int paragraph_number, int *number_of_lines){
  /*Checks if document is null*/
  if(doc == NULL || number_of_lines == NULL){
    return FAILURE;
  }

  /*Checks if paragraph exists*/
  if(doc->number_of_paragraphs < paragraph_number || paragraph_number < 0){
    return FAILURE;
  }

  /*Assign value*/
  *number_of_lines = doc->paragraphs[paragraph_number - 1].number_of_lines;

  return SUCCESS;
}

/*
Appends a new line to the specified paragraph. The conditions that make add line after fail apply to
this function as well. The function returns SUCCESS if the line is appended. Assume that a non-NULL
new line is a nul-terminated string of length between 1 and MAX_STR_SIZE.
*/
int append_line(Document *doc, int paragraph_number, const char *new_line){
  int line_num;

  /*Check if document is null or string is null*/
  if(doc == NULL || new_line == NULL){ 
    return FAILURE;
  }

  /*Checks if paragraph exists*/
  if(doc->number_of_paragraphs < paragraph_number || paragraph_number < 0){
    return FAILURE;
  }

  /*If paragraph is a maximum capacity*/
  if(doc->paragraphs[paragraph_number - 1].number_of_lines == MAX_PARAGRAPH_LINES){
    return FAILURE;
  }

  /*Assign line at the end*/
  line_num = doc->paragraphs[paragraph_number - 1].number_of_lines;
  strcpy(doc->paragraphs[paragraph_number - 1].lines[line_num], new_line);
  doc->paragraphs[paragraph_number - 1].number_of_lines++;
  return SUCCESS;
}

/*
Removes the specified line from the paragraph. The function returns FAILURE if doc is NULL, para-
graph number does not refer to an existing paragraph, or line number does not refer to an existing line;
otherwise the function returns SUCCESS.
*/
int remove_line(Document *doc, int paragraph_number, int line_number){
  int i;

  /*Check is the doc is null*/
  if(doc == NULL){
    return FAILURE;
  }

  /*Checks if paragraph exists*/
  if(doc->number_of_paragraphs < paragraph_number || paragraph_number < 0){
    return FAILURE;
  }

  /*Check if line number is valid*/
  if(line_number < 0 || line_number > doc->paragraphs[paragraph_number - 1].number_of_lines){
    return FAILURE;
  }

  /*Remove the item*/
  for(i = line_number - 1; i < doc->paragraphs[paragraph_number - 1].number_of_lines - 1; i++){
    strcpy(doc->paragraphs[paragraph_number - 1].lines[i], doc->paragraphs[paragraph_number - 1].lines[i + 1]);
  }
  doc->paragraphs[paragraph_number - 1].number_of_lines--;
  return SUCCESS;
}

/*
Adds the first data lines number of rows from the data array to the document, starting a new paragraph
at the beginning of the document. A row with an empty string starts a new paragraph. So if there are n
empty rows in the first data lines, the function adds n + 1 new paragraphs to the document.

Assume that data lines is non-negative, and if it is positive then each of the corresponding rows in the
data array has a null-terminated string of length at most MAX_STR_SIZE. The function returns FAILURE
if doc is NULL, data is NULL or data lines is 0. It also returns FAILURE if adding data lines number of
rows would violate the max number of allowed paragraphs or the max number of lines in a paragraph;
in this case, either leave the document unchanged or grow the document to the maximum allowed. In
all other cases, the function returns SUCCESS.
*/
int load_document(Document *doc, char data[][MAX_STR_SIZE + 1], int data_lines){
  int i = 0;

  /*Check if they are null*/
  if(doc == NULL || data_lines == 0 || data == NULL){
    return FAILURE;
  }

  /*Add first paragraph*/
  add_paragraph_after(doc, doc->number_of_paragraphs);
  
  /*Copy the data from the array*/
  for(i = 0; i < data_lines; i++){
    if(!strcmp(data[i], "")){
      if(doc->number_of_paragraphs != MAX_PARAGRAPHS){
        add_paragraph_after(doc, 0);
      } else{
        return FAILURE;
      }
    }
    else{
      if(doc->paragraphs[doc->number_of_paragraphs - 1].number_of_lines != MAX_PARAGRAPH_LINES){
        append_line(doc, doc->number_of_paragraphs, data[i]);
      } else {
        return FAILURE;
      }
    }
  }  
  return SUCCESS;
}

/*
Replaces every appearance of the text target in the document with the text replacement. Assume that
the target is not the empty string. Assume that the replacement does not generate a line that exceeds the
maximum allowed line length. The function returns FAILURE if doc, target or replacement is NULL;
otherwise the function returns SUCCESS.
*/
int replace_text(Document *doc, const char *target, const char *replacement){
  int x, y;
  char *line, temp[MAX_STR_SIZE + 1];
  int target_len = 0, replace_len = 0;

  /*Check for null pointers*/
  if (doc == NULL || target == NULL || replacement == NULL) {
    return FAILURE;
  }

  /*Get the string length of target and replacement*/
  target_len = strlen(target);
  replace_len = strlen(replacement);

  /*Loop through document*/
	for (x = 0; x < doc->number_of_paragraphs; x++) {
	 	for (y = 0; y < doc->paragraphs[x].number_of_lines; y++) {
	   	line = strstr(doc->paragraphs[x].lines[y], target);
        /*Modify the line*/
	    	while (line) {
	       
		    	strcpy(temp, line);
		      strcpy(line, "");
		      strcat(strcat(line, replacement) + replace_len, temp + target_len);
		      line = strstr(line + target_len, target);	       
		   }
	 	}
  }
  return SUCCESS;
}

/*
Highlights every appearance of the text target in the document, by surrounding the text with the strings
HIGHLIGHT START STR and HIGHLIGHT END STR (see document.h). Assume that the target is not
the empty string. Assume the highlighting does not cause any line to exceed the maximum allowed
line length. The function returns FAILURE if doc or target is NULL; otherwise the function returns
SUCCESS.
*/
int highlight_text(Document *doc, const char *target){
  int x, y;
  char *line, temp[MAX_STR_SIZE + 1];
  int target_len = 0, replace_len = 0;
  char replacement[MAX_PARAGRAPH_LINES +1];

  /*Check for null pointers*/
  if(doc == NULL || target == NULL){
    return FAILURE;
  }

  /*Create the highlight string*/
  strcat(replacement, HIGHLIGHT_START_STR);
  strcat(replacement, target);
  strcat(replacement, HIGHLIGHT_END_STR);

  /*Go over the document*/
	for (x = 0; x < doc->number_of_paragraphs; x++) {
	 	for (y = 0; y < doc->paragraphs[x].number_of_lines; y++) {
	   	line = strstr(doc->paragraphs[x].lines[y], target);
        /*Modify the line*/
	    	while (line) {
	       
		    	strcpy(temp, line);
		      strcpy(line, "");
		      strcat(strcat(line, replacement) + replace_len, temp + target_len);
		      line = strstr(line + target_len, target);	       
		   }
	 	}
  }
  return SUCCESS;
}

/*
Removes every appearance of the text target in the document. Assume the target is not the empty string.
The function returns FAILURE if doc or target is NULL; otherwise the function returns SUCCESS.
*/
int remove_text(Document *doc, const char *target){
  int x, y;
  char *line, temp[MAX_STR_SIZE + 1];
  int target_len = 0;

  /*Check for null pointers*/
  if (doc == NULL || target == NULL) {
    return FAILURE;
  }

  /*Get the string length of target and replacement*/
  target_len = strlen(target);

  /*Loop through document*/
	for (x = 0; x < doc->number_of_paragraphs; x++) {
	 	for (y = 0; y < doc->paragraphs[x].number_of_lines; y++) {
	   	line = strstr(doc->paragraphs[x].lines[y], target);
        /*Modify the line*/
	    	while (line) {
	       
		    	strcpy(temp, line);
		      strcpy(line, "");
		      strcat(strcat(line, ""), temp + target_len);
		      line = strstr(line + target_len, target);	       
		   }
	 	}
  }
  return SUCCESS;
}
